// <auto-generated />
using System;
using MedievalBattle.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedievalBattle.Migrations
{
    [DbContext(typeof(MedievalBattleContext))]
    [Migration("20200711192734_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedievalBattle.Models.AbstractField", b =>
                {
                    b.Property<int>("abstractFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("abstractFieldId1")
                        .HasColumnType("int");

                    b.Property<int>("damagePerUnit")
                        .HasColumnType("int");

                    b.Property<int>("fieldArmor")
                        .HasColumnType("int");

                    b.Property<int>("fieldCount")
                        .HasColumnType("int");

                    b.Property<int>("fieldDamage")
                        .HasColumnType("int");

                    b.Property<int>("fieldHp")
                        .HasColumnType("int");

                    b.Property<int>("fieldSize")
                        .HasColumnType("int");

                    b.Property<int?>("gameControllerId")
                        .HasColumnType("int");

                    b.Property<int>("hpPerUnit")
                        .HasColumnType("int");

                    b.Property<int>("positionId")
                        .HasColumnType("int");

                    b.Property<int>("teamId")
                        .HasColumnType("int");

                    b.Property<int>("unitAliveCoun")
                        .HasColumnType("int");

                    b.Property<int>("unitCost")
                        .HasColumnType("int");

                    b.Property<int>("unitDeadCount")
                        .HasColumnType("int");

                    b.HasKey("abstractFieldId");

                    b.HasIndex("abstractFieldId1");

                    b.HasIndex("gameControllerId");

                    b.ToTable("AbstractFields");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractField");
                });

            modelBuilder.Entity("MedievalBattle.Models.GameController", b =>
                {
                    b.Property<int>("gameControllerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("currentTurn")
                        .HasColumnType("int");

                    b.Property<int>("defeatTeam")
                        .HasColumnType("int");

                    b.Property<bool>("gameAvaliable")
                        .HasColumnType("bit");

                    b.HasKey("gameControllerId");

                    b.ToTable("GameControllers");
                });

            modelBuilder.Entity("MedievalBattle.Models.Primitives.AliveField", b =>
                {
                    b.Property<int>("aliveFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("fieldIndex")
                        .HasColumnType("int");

                    b.Property<int?>("gameControllerId")
                        .HasColumnType("int");

                    b.HasKey("aliveFieldId");

                    b.HasIndex("gameControllerId");

                    b.ToTable("aliveFieldsCount");
                });

            modelBuilder.Entity("MedievalBattle.Models.Primitives.Coin", b =>
                {
                    b.Property<int>("coinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("gameControllerId")
                        .HasColumnType("int");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("coinId");

                    b.HasIndex("gameControllerId");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("MedievalBattle.Models.Unit", b =>
                {
                    b.Property<int>("unitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("armor")
                        .HasColumnType("int");

                    b.Property<int>("armorDurability")
                        .HasColumnType("int");

                    b.Property<int>("damage")
                        .HasColumnType("int");

                    b.Property<int>("hp")
                        .HasColumnType("int");

                    b.Property<int?>("parentObjectabstractFieldId")
                        .HasColumnType("int");

                    b.HasKey("unitId");

                    b.HasIndex("parentObjectabstractFieldId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("MedievalBattle.Models.UnitClasses.Archer", b =>
                {
                    b.HasBaseType("MedievalBattle.Models.AbstractField");

                    b.HasDiscriminator().HasValue("Archer");
                });

            modelBuilder.Entity("MedievalBattle.Models.UnitClasses.Fighter", b =>
                {
                    b.HasBaseType("MedievalBattle.Models.AbstractField");

                    b.HasDiscriminator().HasValue("Fighter");
                });

            modelBuilder.Entity("MedievalBattle.Models.UnitClasses.Flank", b =>
                {
                    b.HasBaseType("MedievalBattle.Models.AbstractField");

                    b.HasDiscriminator().HasValue("Flank");
                });

            modelBuilder.Entity("MedievalBattle.Models.AbstractField", b =>
                {
                    b.HasOne("MedievalBattle.Models.AbstractField", null)
                        .WithMany("Enemies")
                        .HasForeignKey("abstractFieldId1");

                    b.HasOne("MedievalBattle.Models.GameController", "gameController")
                        .WithMany()
                        .HasForeignKey("gameControllerId");
                });

            modelBuilder.Entity("MedievalBattle.Models.Primitives.AliveField", b =>
                {
                    b.HasOne("MedievalBattle.Models.GameController", null)
                        .WithMany("aliveFieldsCount")
                        .HasForeignKey("gameControllerId");
                });

            modelBuilder.Entity("MedievalBattle.Models.Primitives.Coin", b =>
                {
                    b.HasOne("MedievalBattle.Models.GameController", null)
                        .WithMany("coins")
                        .HasForeignKey("gameControllerId");
                });

            modelBuilder.Entity("MedievalBattle.Models.Unit", b =>
                {
                    b.HasOne("MedievalBattle.Models.AbstractField", "parentObject")
                        .WithMany("Units")
                        .HasForeignKey("parentObjectabstractFieldId");
                });
#pragma warning restore 612, 618
        }
    }
}
